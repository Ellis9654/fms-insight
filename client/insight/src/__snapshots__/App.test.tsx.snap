// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders the cost per piece: cost per piece 1`] = `
<div
  id="App"
>
  <Header
    routeState={
      Object {
        "current": "ROUTE_CostPerPiece",
        "selected_load_id": 5,
        "station_free_material": false,
        "station_monitor": "StationType_LoadUnload",
        "station_queues": Array [
          "q1",
          "q1",
        ],
      }
    }
    setRoute={[MockFunction]}
  />
  <CostPerPiece />
</div>
`;

exports[`renders the cost per piece: cost per piece header 1`] = `
<nav
  id="navHeader"
>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={false}
    smDown={true}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          style={
            Object {
              "marginRight": "2em",
            }
          }
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <WithStyles(Tabs)
          fullWidth={false}
          onChange={[Function]}
          style={
            Object {
              "alignSelf": "flex-end",
              "flexGrow": 1,
            }
          }
          value={3}
        >
          <WithStyles(Tab)
            label="Dashboard"
            value={0}
          />
          <WithStyles(Tab)
            label="Station Monitor"
            value={1}
          />
          <WithStyles(Tab)
            label="Efficiency"
            value={2}
          />
        </WithStyles(Tabs)>
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
    </WithStyles(AppBar)>
  </Hidden>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={true}
    smDown={false}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <div
          style={
            Object {
              "flexGrow": 1,
            }
          }
        />
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
      <WithStyles(Tabs)
        fullWidth={true}
        onChange={[Function]}
        style={Object {}}
        value={3}
      >
        <WithStyles(Tab)
          label="Dashboard"
          value={0}
        />
        <WithStyles(Tab)
          label="Station Monitor"
          value={1}
        />
        <WithStyles(Tab)
          label="Efficiency"
          value={2}
        />
      </WithStyles(Tabs)>
    </WithStyles(AppBar)>
  </Hidden>
</nav>
`;

exports[`renders the dashboard: dashboard 1`] = `
<div
  id="App"
>
  <Header
    routeState={
      Object {
        "current": "ROUTE_Dashboard",
        "selected_load_id": 5,
        "station_free_material": false,
        "station_monitor": "StationType_LoadUnload",
        "station_queues": Array [
          "q1",
          "q1",
        ],
      }
    }
    setRoute={[MockFunction]}
  />
  <Dashboard />
</div>
`;

exports[`renders the dashboard: dashboard header 1`] = `
<nav
  id="navHeader"
>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={false}
    smDown={true}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          style={
            Object {
              "marginRight": "2em",
            }
          }
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <WithStyles(Tabs)
          fullWidth={false}
          onChange={[Function]}
          style={
            Object {
              "alignSelf": "flex-end",
              "flexGrow": 1,
            }
          }
          value={0}
        >
          <WithStyles(Tab)
            label="Dashboard"
            value={0}
          />
          <WithStyles(Tab)
            label="Station Monitor"
            value={1}
          />
          <WithStyles(Tab)
            label="Efficiency"
            value={2}
          />
        </WithStyles(Tabs)>
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
    </WithStyles(AppBar)>
  </Hidden>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={true}
    smDown={false}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <div
          style={
            Object {
              "flexGrow": 1,
            }
          }
        />
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
      <WithStyles(Tabs)
        fullWidth={true}
        onChange={[Function]}
        style={Object {}}
        value={0}
      >
        <WithStyles(Tab)
          label="Dashboard"
          value={0}
        />
        <WithStyles(Tab)
          label="Station Monitor"
          value={1}
        />
        <WithStyles(Tab)
          label="Efficiency"
          value={2}
        />
      </WithStyles(Tabs)>
    </WithStyles(AppBar)>
  </Hidden>
</nav>
`;

exports[`renders the efficiency: efficiency 1`] = `
<div
  id="App"
>
  <Header
    routeState={
      Object {
        "current": "ROUTE_Efficiency",
        "selected_load_id": 5,
        "station_free_material": false,
        "station_monitor": "StationType_LoadUnload",
        "station_queues": Array [
          "q1",
          "q1",
        ],
      }
    }
    setRoute={[MockFunction]}
  />
  <Efficiency />
</div>
`;

exports[`renders the efficiency: efficiency header 1`] = `
<nav
  id="navHeader"
>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={false}
    smDown={true}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          style={
            Object {
              "marginRight": "2em",
            }
          }
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <WithStyles(Tabs)
          fullWidth={false}
          onChange={[Function]}
          style={
            Object {
              "alignSelf": "flex-end",
              "flexGrow": 1,
            }
          }
          value={2}
        >
          <WithStyles(Tab)
            label="Dashboard"
            value={0}
          />
          <WithStyles(Tab)
            label="Station Monitor"
            value={1}
          />
          <WithStyles(Tab)
            label="Efficiency"
            value={2}
          />
        </WithStyles(Tabs)>
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
    </WithStyles(AppBar)>
  </Hidden>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={true}
    smDown={false}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <div
          style={
            Object {
              "flexGrow": 1,
            }
          }
        />
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
      <WithStyles(Tabs)
        fullWidth={true}
        onChange={[Function]}
        style={Object {}}
        value={2}
      >
        <WithStyles(Tab)
          label="Dashboard"
          value={0}
        />
        <WithStyles(Tab)
          label="Station Monitor"
          value={1}
        />
        <WithStyles(Tab)
          label="Efficiency"
          value={2}
        />
      </WithStyles(Tabs)>
    </WithStyles(AppBar)>
  </Hidden>
</nav>
`;

exports[`renders the inspection monitor: inspection monitor 1`] = `
<div
  id="App"
>
  <Header
    routeState={
      Object {
        "current": "ROUTE_Inspection",
        "selected_load_id": 5,
        "station_free_material": false,
        "station_monitor": "StationType_Insp",
        "station_queues": Array [
          "q1",
          "q1",
        ],
      }
    }
    setRoute={[MockFunction]}
  />
  <StationMonitor
    monitor_type="StationType_Insp"
  />
</div>
`;

exports[`renders the inspection monitor: inspection monitor header 1`] = `
<nav
  id="navHeader"
>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={false}
    smDown={true}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          style={
            Object {
              "marginRight": "2em",
            }
          }
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <WithStyles(Tabs)
          fullWidth={false}
          onChange={[Function]}
          style={
            Object {
              "alignSelf": "flex-end",
              "flexGrow": 1,
            }
          }
          value={1}
        >
          <WithStyles(Tab)
            label="Dashboard"
            value={0}
          />
          <WithStyles(Tab)
            label="Station Monitor"
            value={1}
          />
          <WithStyles(Tab)
            label="Efficiency"
            value={2}
          />
        </WithStyles(Tabs)>
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
    </WithStyles(AppBar)>
  </Hidden>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={true}
    smDown={false}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <div
          style={
            Object {
              "flexGrow": 1,
            }
          }
        />
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
      <WithStyles(Tabs)
        fullWidth={true}
        onChange={[Function]}
        style={Object {}}
        value={1}
      >
        <WithStyles(Tab)
          label="Dashboard"
          value={0}
        />
        <WithStyles(Tab)
          label="Station Monitor"
          value={1}
        />
        <WithStyles(Tab)
          label="Efficiency"
          value={2}
        />
      </WithStyles(Tabs)>
    </WithStyles(AppBar)>
  </Hidden>
</nav>
`;

exports[`renders the load monitor: station monitor 1`] = `
<div
  id="App"
>
  <Header
    routeState={
      Object {
        "current": "ROUTE_LoadMonitor",
        "selected_load_id": 5,
        "station_free_material": false,
        "station_monitor": "StationType_LoadUnload",
        "station_queues": Array [
          "q1",
          "q1",
        ],
      }
    }
    setRoute={[MockFunction]}
  />
  <StationMonitor
    monitor_type="StationType_LoadUnload"
  />
</div>
`;

exports[`renders the load monitor: station monitor header 1`] = `
<nav
  id="navHeader"
>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={false}
    smDown={true}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          style={
            Object {
              "marginRight": "2em",
            }
          }
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <WithStyles(Tabs)
          fullWidth={false}
          onChange={[Function]}
          style={
            Object {
              "alignSelf": "flex-end",
              "flexGrow": 1,
            }
          }
          value={1}
        >
          <WithStyles(Tab)
            label="Dashboard"
            value={0}
          />
          <WithStyles(Tab)
            label="Station Monitor"
            value={1}
          />
          <WithStyles(Tab)
            label="Efficiency"
            value={2}
          />
        </WithStyles(Tabs)>
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
    </WithStyles(AppBar)>
  </Hidden>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={true}
    smDown={false}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <div
          style={
            Object {
              "flexGrow": 1,
            }
          }
        />
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
      <WithStyles(Tabs)
        fullWidth={true}
        onChange={[Function]}
        style={Object {}}
        value={1}
      >
        <WithStyles(Tab)
          label="Dashboard"
          value={0}
        />
        <WithStyles(Tab)
          label="Station Monitor"
          value={1}
        />
        <WithStyles(Tab)
          label="Efficiency"
          value={2}
        />
      </WithStyles(Tabs)>
    </WithStyles(AppBar)>
  </Hidden>
</nav>
`;

exports[`renders the wash monitor: wash monitor 1`] = `
<div
  id="App"
>
  <Header
    routeState={
      Object {
        "current": "ROUTE_Wash",
        "selected_load_id": 5,
        "station_free_material": false,
        "station_monitor": "StationType_Wash",
        "station_queues": Array [
          "q1",
          "q1",
        ],
      }
    }
    setRoute={[MockFunction]}
  />
  <StationMonitor
    monitor_type="StationType_Wash"
  />
</div>
`;

exports[`renders the wash monitor: wash monitor header 1`] = `
<nav
  id="navHeader"
>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={false}
    smDown={true}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          style={
            Object {
              "marginRight": "2em",
            }
          }
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <WithStyles(Tabs)
          fullWidth={false}
          onChange={[Function]}
          style={
            Object {
              "alignSelf": "flex-end",
              "flexGrow": 1,
            }
          }
          value={1}
        >
          <WithStyles(Tab)
            label="Dashboard"
            value={0}
          />
          <WithStyles(Tab)
            label="Station Monitor"
            value={1}
          />
          <WithStyles(Tab)
            label="Efficiency"
            value={2}
          />
        </WithStyles(Tabs)>
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
    </WithStyles(AppBar)>
  </Hidden>
  <Hidden
    implementation="js"
    lgDown={false}
    lgUp={false}
    mdDown={false}
    mdUp={true}
    smDown={false}
    smUp={false}
    xlDown={false}
    xlUp={false}
    xsDown={false}
    xsUp={false}
  >
    <WithStyles(AppBar)
      position="static"
    >
      <WithStyles(Toolbar)>
        <WithStyles(Typography)
          variant="title"
        >
          Insight
        </WithStyles(Typography)>
        <div
          style={
            Object {
              "flexGrow": 1,
            }
          }
        />
        <Connect(LoadingIcon) />
      </WithStyles(Toolbar)>
      <WithStyles(Tabs)
        fullWidth={true}
        onChange={[Function]}
        style={Object {}}
        value={1}
      >
        <WithStyles(Tab)
          label="Dashboard"
          value={0}
        />
        <WithStyles(Tab)
          label="Station Monitor"
          value={1}
        />
        <WithStyles(Tab)
          label="Efficiency"
          value={2}
        />
      </WithStyles(Tabs)>
    </WithStyles(AppBar)>
  </Hidden>
</nav>
`;
